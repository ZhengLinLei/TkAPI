class TkApi{history={user:[],bot:[],round:0};constructor(Json){let template={symbol:{bot:"x",user:"o"},botType:"Bot",speed:1},botMode=["Random","Bot"];this.options=Json?{symbol:{bot:Json.symbol&&Json.symbol.bot?Json.symbol.bot:template.symbol.bot,user:Json.symbol&&Json.symbol.user?Json.symbol.user:template.symbol.user},botType:Json.botType&&botMode.includes(Json.botType)?Json.botType:template.botType,speed:Json.speed&&!isNaN(Json.speed)?Json.speed:template.speed}:template}getHistory(){return this.history}reset(){return this.history.bot=[],this.history.user=[],this.history.round=0,!0}getResponse(position){if(void 0===position)return console.error('Function need almost one input in "class.getResponse(:num)"'),!1;if(!this.validPos(position))return console.error(`Invalid input ${position} position in "class.getResponse(:num)"`),!1;if(!this.emptyPos(position))return console.error(`Position ${position} not empty in "class.getResponse(:num)"`),!1;this.history.user.push(position),this.history.round++;for(var dt=new Date;new Date-dt<=this.options.speed;);return this.getWinner()?-1:"Random"===this.options.botType?this.randomBotMode(position):this.normalBotMode(position)}getSimplyUI(){let text="";for(let i=0;i<10;i+=3)text+=" ___ ___ ___  ",i<8&&(text+=`\n| ${this.history.user.includes(i)?this.options.symbol.user:this.history.bot.includes(i)?this.options.symbol.bot:" "} | ${this.history.user.includes(i+1)?this.options.symbol.user:this.history.bot.includes(i+1)?this.options.symbol.bot:" "} | ${this.history.user.includes(i+2)?this.options.symbol.user:this.history.bot.includes(i+2)?this.options.symbol.bot:" "} |\n`);text+=`\n\n Round: ${this.history.round}`,console.log(text)}getWinner(){let key=["user","bot"];for(let i=0;i<key.length;i++){const el=key[i];for(let i=0;i<9;i+=3)if(this.history[el].includes(i)&&this.history[el].includes(i+1)&&this.history[el].includes(i+2))return el;for(let i=0;i<3;i++)if(this.history[el].includes(i)&&this.history[el].includes(i+3)&&this.history[el].includes(i+6))return el;if(this.history[el].includes(0)&&this.history[el].includes(4)&&this.history[el].includes(8)||this.history[el].includes(2)&&this.history[el].includes(4)&&this.history[el].includes(6))return el}for(let i=0;i<9;i++)if(!this.history.bot.includes(i)&&!this.history.user.includes(i))return!1;return"draw"}validPos(num){return!isNaN(num)&&num>-1&&num<9}emptyPos(num){return!this.history.user.includes(num)&&!this.history.bot.includes(num)}randomBotMode(){let numBot=Math.round(8*Math.random());return this.emptyPos(numBot)?(this.history.bot.push(numBot),numBot):this.randomBotMode()}normalBotMode(){return this.history.round<2?this.randomBotMode():this.botEngine()}botEngine(){let numBot,numArr={defenseNumArr:[],attackNumArr:[]},defenseNum,attackNum,key,numKey=["defenseNumArr","attackNumArr"];return["user","bot"].forEach((el,index)=>{for(let i=0;i<9;i+=3)this.history[el].includes(i+1)&&this.history[el].includes(i+2)&&numArr[numKey[index]].push(i),this.history[el].includes(i)&&this.history[el].includes(i+2)&&numArr[numKey[index]].push(i+1),this.history[el].includes(i)&&this.history[el].includes(i+1)&&numArr[numKey[index]].push(i+2);for(let i=0;i<3;i++)this.history[el].includes(i+3)&&this.history[el].includes(i+6)&&numArr[numKey[index]].push(i),this.history[el].includes(i)&&this.history[el].includes(i+6)&&numArr[numKey[index]].push(i+3),this.history[el].includes(i)&&this.history[el].includes(i+3)&&numArr[numKey[index]].push(i+6);this.history[el].includes(4)&&this.history[el].includes(8)&&numArr[numKey[index]].push(0),this.history[el].includes(0)&&this.history[el].includes(8)&&numArr[numKey[index]].push(4),this.history[el].includes(0)&&this.history[el].includes(4)&&numArr[numKey[index]].push(8),this.history[el].includes(4)&&this.history[el].includes(6)&&numArr[numKey[index]].push(2),this.history[el].includes(2)&&this.history[el].includes(6)&&numArr[numKey[index]].push(4),this.history[el].includes(2)&&this.history[el].includes(4)&&numArr[numKey[index]].push(6)}),numArr.defenseNumArr.forEach(element=>{if(this.emptyPos(element))return defenseNum=element,!0}),numArr.attackNumArr.forEach(element=>{if(this.emptyPos(element))return attackNum=element,!0}),numBot=void 0!==attackNum?attackNum:defenseNum,void 0!==numBot&&this.emptyPos(numBot)?(this.history.bot.push(numBot),numBot):this.randomBotMode()}}